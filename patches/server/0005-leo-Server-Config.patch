From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Sun, 3 Mar 2019 18:25:06 -0800
Subject: [PATCH] leo Server Config


diff --git a/src/main/java/com/leo/leo/config/leoConfig.java b/src/main/java/com/leo/leo/config/leoConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..fb21ae58c9bf2ccb364477c941e5627ba3ddc7da
--- /dev/null
+++ b/src/main/java/com/leo/leo/config/leoConfig.java
@@ -0,0 +1,219 @@
+package com.leo.leo.config;
+
+import ca.spottedleaf.concurrentutil.util.Throw;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.logging.Level;
+
+public final class leoConfig {
+
+    public static final String CONFIG_HEADER = "Configuration file for leo.";
+    public static final int CURRENT_CONFIG_VERSION = 1;
+
+    private static final Object[] EMPTY = new Object[0];
+
+    private static File configFile;
+    public static YamlConfiguration config;
+    private static int configVersion;
+
+    public static void init(final File file) {
+        // TODO remove this in the future...
+        final File leoConfig = new File(file.getParent(), "leo.yml");
+        if (!leoConfig.exists()) {
+            final File oldConfig = new File(file.getParent(), "concrete.yml");
+            oldConfig.renameTo(leoConfig);
+        }
+        leoConfig.configFile = file;
+        final YamlConfiguration config = new YamlConfiguration();
+        config.options().header(CONFIG_HEADER);
+        config.options().copyDefaults(true);
+
+        if (!file.exists()) {
+            try {
+                file.createNewFile();
+            } catch (final Exception ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Failure to create leo config", ex);
+            }
+        } else {
+            try {
+                config.load(file);
+            } catch (final Exception ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Failure to load leo config", ex);
+                Throw.rethrow(ex); /* Rethrow, this is critical */
+                throw new RuntimeException(ex); // unreachable
+            }
+        }
+
+        leoConfig.load(config);
+    }
+
+    public static void load(final YamlConfiguration config) {
+        leoConfig.config = config;
+        leoConfig.configVersion = leoConfig.getInt("config-version-please-do-not-modify-me", CURRENT_CONFIG_VERSION);
+        leoConfig.set("config-version-please-do-not-modify-me", CURRENT_CONFIG_VERSION);
+
+        for (final Method method : leoConfig.class.getDeclaredMethods()) {
+            if (method.getReturnType() != void.class || method.getParameterCount() != 0 ||
+                    !Modifier.isPrivate(method.getModifiers()) || !Modifier.isStatic(method.getModifiers())) {
+                continue;
+            }
+
+            try {
+                method.setAccessible(true);
+                method.invoke(null, EMPTY);
+            } catch (final Exception ex) {
+                Throw.rethrow(ex);
+                throw new RuntimeException(ex); // unreachable
+            }
+        }
+
+        /* We re-save to add new options */
+        try {
+            config.save(leoConfig.configFile);
+        } catch (final Exception ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Unable to save leo config", ex);
+        }
+    }
+
+    static void set(final String path, final Object value) {
+        leoConfig.config.set(path, value);
+    }
+
+    static boolean getBoolean(final String path, final boolean dfl) {
+        leoConfig.config.addDefault(path, Boolean.valueOf(dfl));
+        return leoConfig.config.getBoolean(path, dfl);
+    }
+
+    static int getInt(final String path, final int dfl) {
+        leoConfig.config.addDefault(path, Integer.valueOf(dfl));
+        return leoConfig.config.getInt(path, dfl);
+    }
+
+    static long getLong(final String path, final long dfl) {
+        leoConfig.config.addDefault(path, Long.valueOf(dfl));
+        return leoConfig.config.getLong(path, dfl);
+    }
+
+    static double getDouble(final String path, final double dfl) {
+        leoConfig.config.addDefault(path, Double.valueOf(dfl));
+        return leoConfig.config.getDouble(path, dfl);
+    }
+
+    public static final class WorldConfig {
+
+        public final String worldName;
+        public ConfigurationSection config;
+        ConfigurationSection worldDefaults;
+
+        public WorldConfig(final String worldName) {
+            this.worldName = worldName;
+            this.init();
+        }
+
+        public void init() {
+            this.worldDefaults = leoConfig.config.getConfigurationSection("world-settings.default");
+            if (this.worldDefaults == null) {
+                this.worldDefaults = leoConfig.config.createSection("world-settings.default");
+            }
+
+            String worldSectionPath = leoConfig.configVersion < 1 ? this.worldName : "world-settings.".concat(this.worldName);
+            ConfigurationSection section = leoConfig.config.getConfigurationSection(worldSectionPath);
+            if (section == null) {
+                section = leoConfig.config.createSection(worldSectionPath);
+            }
+            leoConfig.config.set(worldSectionPath, section);
+
+            this.load(section);
+        }
+
+        public void load(final ConfigurationSection config) {
+            this.config = config;
+
+            for (final Method method : leoConfig.WorldConfig.class.getDeclaredMethods()) {
+                if (method.getReturnType() != void.class || method.getParameterCount() != 0 ||
+                        !Modifier.isPrivate(method.getModifiers()) || Modifier.isStatic(method.getModifiers())) {
+                    continue;
+                }
+
+                try {
+                    method.setAccessible(true);
+                    method.invoke(this, EMPTY);
+                } catch (final Exception ex) {
+                    Throw.rethrow(ex);
+                    throw new RuntimeException(ex); // unreachable
+                }
+            }
+
+            if (leoConfig.configVersion < 1) {
+                ConfigurationSection oldSection = leoConfig.config.getConfigurationSection(this.worldName);
+                leoConfig.config.set("world-settings.".concat(this.worldName), oldSection);
+                leoConfig.config.set(this.worldName, null);
+            }
+
+            /* We re-save to add new options */
+            try {
+                leoConfig.config.save(leoConfig.configFile);
+            } catch (final Exception ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Unable to save leo config", ex);
+            }
+        }
+
+        /**
+         * update world defaults for the specified path, but also sets this world's config value for the path
+         * if it exists
+         */
+        void set(final String path, final Object val) {
+            this.worldDefaults.set(path, val);
+            if (this.config.get(path) != null) {
+                this.config.set(path, val);
+            }
+        }
+
+        boolean getBoolean(final String path, final boolean dfl) {
+            this.worldDefaults.addDefault(path, Boolean.valueOf(dfl));
+            if (leoConfig.configVersion < 1) {
+                if (this.config.getBoolean(path) == dfl) {
+                    this.config.set(path, null);
+                }
+            }
+            return this.config.getBoolean(path, this.worldDefaults.getBoolean(path));
+        }
+
+        int getInt(final String path, final int dfl) {
+            this.worldDefaults.addDefault(path, Integer.valueOf(dfl));
+            if (leoConfig.configVersion < 1) {
+                if (this.config.getInt(path) == dfl) {
+                    this.config.set(path, null);
+                }
+            }
+            return this.config.getInt(path, this.worldDefaults.getInt(path));
+        }
+
+        long getLong(final String path, final long dfl) {
+            this.worldDefaults.addDefault(path, Long.valueOf(dfl));
+            if (leoConfig.configVersion < 1) {
+                if (this.config.getLong(path) == dfl) {
+                    this.config.set(path, null);
+                }
+            }
+            return this.config.getLong(path, this.worldDefaults.getLong(path));
+        }
+
+        double getDouble(final String path, final double dfl) {
+            this.worldDefaults.addDefault(path, Double.valueOf(dfl));
+            if (leoConfig.configVersion < 1) {
+                if (this.config.getDouble(path) == dfl) {
+                    this.config.set(path, null);
+                }
+            }
+            return this.config.getDouble(path, this.worldDefaults.getDouble(path));
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 1ef7890da599d13e784861035e7891efcc4cd504..eb5422dc4a33eeda62694bdab29c67c641659b6b 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -194,6 +194,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         com.destroystokyo.paper.PaperConfig.registerCommands();
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         // Paper end
+        com.leo.leo.config.leoConfig.init((File) options.valueOf("leo-settings")); // leo - Server Config
 
         this.setSpawnAnimals(dedicatedserverproperties.spawnAnimals);
         this.setSpawnNPCs(dedicatedserverproperties.spawnNpcs);
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 549d975cb9df17d5979261b2f8e0bf2c6b996ea5..6c62446f24438fab0975efbd76ebe4ef43391618 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -82,6 +82,8 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     public final com.destroystokyo.paper.PaperWorldConfig paperConfig; // Paper
     public final ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
 
+    public final com.leo.leo.config.leoConfig.WorldConfig leoConfig; // leo - Server Config
+
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPosition lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
@@ -131,6 +133,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig( worlddata.getName() ); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(worlddata.getName(), this.spigotConfig); // Paper
         this.chunkPacketBlockController = this.paperConfig.antiXray ? new ChunkPacketBlockControllerAntiXray(this.paperConfig) : ChunkPacketBlockController.NO_OPERATION_INSTANCE; // Paper - Anti-Xray
+        this.leoConfig = new com.leo.leo.config.leoConfig.WorldConfig(worlddata.getName()); // leo - Server Config
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
         this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index ceff951da857a8a0db4ea7600a81b3a2c4ce7654..ca6468c245c6446ada97aaf983bede1797b01ce8 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -806,6 +806,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
+        com.leo.leo.config.leoConfig.init((File) console.options.valueOf("leo-settings")); // leo - Server Config
         for (WorldServer world : console.getWorlds()) {
             world.worldData.setDifficulty(config.difficulty);
             world.setSpawnFlags(config.spawnMonsters, config.spawnAnimals);
@@ -834,6 +835,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.paperConfig.init(); // Paper
+            world.leoConfig.init(); // leo - Server Config
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -2082,6 +2084,14 @@ public final class CraftServer implements Server {
             return com.destroystokyo.paper.PaperConfig.config;
         }
 
+        // leo start - add config to timings report
+        @Override
+        public YamlConfiguration getleoConfig()
+        {
+            return com.leo.leo.config.leoConfig.config;
+        }
+        // leo end - add config to timings report
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index cb60310e63ce0f55f5e706edf9e1ef61a3732600..2666940e865db5a31dd8a61383f2d4514e48714d 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -137,6 +137,13 @@ public class Main {
                         .defaultsTo(new File("paper.yml"))
                         .describedAs("Yml file");
                 // Paper end
+                // leo Start - Server Config
+                acceptsAll(asList("leo", "leo-settings"), "File for leo settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("leo.yml"))
+                        .describedAs("Yml file");
+                /* Conctete End - Server Config */
 
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
